'''import the module'''
>>> matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul

'''test for matrix, lists of lists with valid integers'''
>>> matrix_mul([[1, 2], [3, 4]], [[1, 2], [3, 4]])
array([[ 7, 10],
       [15, 22]])
>>> matrix_mul([[1, 2]], [[3, 4], [5, 6]])
array([[13, 16]])
>>> matrix_mul([[1,2], [1, 3]], [[1, 2, 3],[2, 4, 5]])
array([[ 5, 10, 13],
       [ 7, 14, 18]])

'''valid matrix with floats and integers'''
>>> matrix_mul([[2.5, 7.8, 6], [3, 2.4, 2.1]], [[2, 3, 4], [2.7, 8, 5.5], [1, 2, 3]])
array([[32.06, 81.9 , 70.9 ],
       [14.58, 32.4 , 31.5 ]])

'''empty argument'''
>>> matrix_mul([[]], [[]])
Traceback (most recent call last):
ValueError: shapes (1,0) and (2,2) not aligned: 0 (dim 1) != 2 (dim 0)

>>> matrix_mul([[1, 2, 3]], [])
Traceback (most recent call last):
ValueError: shapes (2,2) and (1,0) not aligned: 2 (dim 1) != 1 (dim 0)

'''no argument'''
>>> matrix_mul()
Traceback (most recent call last):
TypeError: lazy_matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

'''column of m_a not equal to row of m_b'''
>>> matrix_mul([[1, 2]], [[1, 3]])
Traceback (most recent call last):
ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)
>>> matrix_mul([[1, 2, 3], [3, 4, 5]], [[1, 2, 3], [2, 4, 5]])
Traceback (most recent call last):
ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

'''non-matching column of the same matrix'''
>>> matrix_mul([[1, 2], [1]], [[1, 2, 3], [4, 5, 6]])
Traceback (most recent call last):
TypeError: setting an array element with a sequence.

>>> matrix_mul([[1, 2, 3], [2, 3, 4]], [[1, 2], [1, 2, 3]])
Traceback (most recent call last):
TypeError: setting an array element with a sequence.

'''invalid argument'''
>>> matrix_mul({1, 2, 4}, [[1, 2, 3]])
Traceback (most recent call last):
TypeError: Scalar operands are not allowed, use '*' instead
>>> matrix_mul([[1, 2, 3]], {1, 2, 4})
Traceback (most recent call last):
TypeError: Scalar operands are not allowed, use '*' instead

'''list containing invalid type'''
>>> matrix_mul([[1, 2, {1, 5}]], [["string", {"dict": 2}]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

>>> matrix_mul([[1, 2], [1, 5]], [["string", {"dict": 2}]])
Traceback (most recent call last):
TypeError: invalid data type for einsum

'''list of non-lists'''
>>> matrix_mul(["non-list"], [[1, 2, 3]])
Traceback (most recent call last):
TypeError: m_a must be a list of lists

>>> matrix_mul([[1, 2, 3]], ["non-list"])
Traceback (most recent call last):
TypeError: m_b must be a list of lists
