""" Let's write some edge cases for the function.
I have to import the module that defines the function first
of all.

>>> matrix = __import__('2-matrix_divided').matrix_divided

:=: 
    Next we start our test cases, each test cases with different test
    scenario
:=:

:=:
    first test scenario is to check if the argument parsed if the list is empty and 
    no div is parsed
:=:

>>> matrix_1 = []
>>> matrix(matrix_1)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

:=:
     let's test for when we pass an empty list with a div
:=:

>>> matrix_1 = []
>>> matrix(matrix_1, 1)
[]

:=:
    Let's test for when a matrix of list is parsed with no div
:=:

>>> matrix_1 = [[1, 2, 3], [3, 4, 6]]
>>> matrix(matrix_1)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

:=:
    let's test for when matrix is parsed with a div
:=:

>>> matrix_1 = [[1, 2, 3], [3, 4, 6]]
>>> matrix(matrix_1, 3)
[[0.33, 0.67, 1.0], [1.0, 1.33, 2.0]]
>>> print(matrix_1)
[[1, 2, 3], [3, 4, 6]]

{9}. let's test for when a matrix containing element which is not an integer
>>> matrix_1 = [[1, 2, "string"], [3, 4, 6]]
>>> matrix(matrix_1, 3)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

:=: let's parse a list and the list contains an element of different type
    also the div is of different type
:=:
>>> matrix(matrix_1, {2}) 
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

{}. a valid matrix with an invalid div.
>>> matrix_1 = [[1, 2, 3], [3, 4, 6]]
>>> matrix(matrix_1, "3")
Traceback (most recent call last):
TypeError: div must be a number

{}. parse a float div
>>> matrix(matrix_1, 3.9)
[[0.26, 0.51, 0.77], [0.77, 1.03, 1.54]]

{}. a matrix of float and div integer
>>> matrix_1 = [[1, 2, 3.9], [3, 4, 6]]
>>> matrix(matrix_1, 3)
[[0.33, 0.67, 1.3], [1.0, 1.33, 2.0]]